"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringGenerator = exports.numberGenerator = exports.hashu32 = exports.toUint32 = exports.smoothstep = exports.fract = exports.clamp = exports.lerp = exports.unique = exports.range = void 0;
const is_1 = require("./is");
const range = (n) => n <= 0 || typeof n !== "number" || isNaN(n) || !isFinite(n)
    ? []
    : Array.from(Array(Math.floor(n)).keys());
exports.range = range;
const unique = (arr) => [...Array.from(new Set(arr))];
exports.unique = unique;
const lerp = (vFrom, vTo, scale) => {
    return vFrom + (vTo - vFrom) * scale;
};
exports.lerp = lerp;
const clamp = (value, min, max) => Math.max(min, Math.min(max, value));
exports.clamp = clamp;
const fract = (x) => x - Math.floor(x);
exports.fract = fract;
const smoothstep = (edge0, edge1, value) => {
    const x = (0, exports.clamp)((value - edge0) / (edge1 - edge0), 0.0, 1.0);
    return x * x * (3.0 - 2.0 * x);
};
exports.smoothstep = smoothstep;
const toUint32 = (f) => {
    return Number(f) >>> 0;
};
exports.toUint32 = toUint32;
const hashu32 = (i) => {
    const U = exports.toUint32;
    i = U(i);
    const s = U(i >> 3) * 12;
    const k = U(~i + ~s);
    i ^= U(i << 17);
    i ^= U(i >> 13);
    i ^= U(i << 5);
    i += U((i ^ k) + i * k);
    i *= U(1013);
    i ^= U(i >> 4);
    return U(i * k + i + i * k + k);
};
exports.hashu32 = hashu32;
const numberGenerator = (initSeed = 4193) => {
    let seed = initSeed;
    const next = () => {
        const num = (0, exports.hashu32)((0, exports.toUint32)(seed));
        seed = (0, exports.hashu32)(num + seed);
        return num;
    };
    const nextFloat = (min = 0, max = 1) => {
        const scale = next() / 0xffffffff;
        return (0, exports.clamp)(min + (scale * max - min), min, max);
    };
    const nextInt = (min = 0, max = 0xffffffff) => {
        return (0, exports.clamp)(Math.round(nextFloat(min, max)), min, max);
    };
    const nextBool = () => {
        return nextFloat() > 0.5;
    };
    return {
        next,
        nextFloat,
        nextInt,
        nextBool,
    };
};
exports.numberGenerator = numberGenerator;
const stringGenerator = (seed = 4193, numGen = (0, exports.numberGenerator)(seed)) => {
    const alpha = "abcdefghijklmnopqrstuvwxyz";
    const vowels = Array.from(alpha).filter(it => (0, is_1.isVowel)(it));
    const consonants = Array.from(alpha).filter(it => (0, is_1.isConsonant)(it));
    const nextChar = () => {
        const digit = numGen.nextBool();
        if (digit) {
            return (numGen.nextInt(0, 9) % 9) + "";
        }
        const upper = numGen.nextBool();
        const index = numGen.nextInt(0, alpha.length - 1) % alpha.length;
        const c = alpha[index];
        return upper ? c.toUpperCase() : c;
    };
    const nextVowel = () => {
        const index = numGen.nextInt(0, vowels.length - 1) % vowels.length;
        return vowels[index];
    };
    const nextConsonant = () => {
        const index = numGen.nextInt(0, consonants.length - 1) % consonants.length;
        return consonants[index];
    };
    const nextWord = (min, max) => {
        const length = numGen.nextInt(min, max);
        return (0, exports.range)(length).map((i) => i % 2 === 0 ? nextConsonant() : nextVowel()).join('');
    };
    const next = (length) => {
        return (0, exports.range)(length)
            .map(() => nextChar())
            .join("");
    };
    return {
        next,
        nextChar,
        nextVowel,
        nextConsonant,
        nextWord
    };
};
exports.stringGenerator = stringGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGxpY2l0L3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUFxRDtBQUU5QyxNQUFNLEtBQUssR0FBRyxDQUFDLENBQVMsRUFBWSxFQUFFLENBQzNDLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFDLEVBQUU7SUFDSixDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFIakMsUUFBQSxLQUFLLFNBRzRCO0FBRXZDLE1BQU0sTUFBTSxHQUFHLENBQUksR0FBUSxFQUFPLEVBQUUsQ0FDekMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBUSxDQUFDO0FBRDFCLFFBQUEsTUFBTSxVQUNvQjtBQUVoQyxNQUFNLElBQUksR0FBRyxDQUFDLEtBQWEsRUFBRSxHQUFXLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDaEUsT0FBTyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ3ZDLENBQUMsQ0FBQztBQUZXLFFBQUEsSUFBSSxRQUVmO0FBRUssTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFhLEVBQUUsR0FBVyxFQUFFLEdBQVcsRUFBRSxFQUFFLENBQy9ELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFEekIsUUFBQSxLQUFLLFNBQ29CO0FBRS9CLE1BQU0sS0FBSyxHQUFH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